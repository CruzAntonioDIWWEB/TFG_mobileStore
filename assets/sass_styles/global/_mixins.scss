@use 'variables' as v;
@use 'sass:map';

// Breakpoint mixin for responsive design
@mixin breakpoint($breakpoint) {
    @if $breakpoint =="mobile" {
        @media (max-width: map.get(v.$breakpoints, mobile)) {
            @content;
        }
    }

    @else if $breakpoint =="tablet" {
        @media (max-width: map.get(v.$breakpoints, tablet)) {
            @content;
        }
    }

    @else if $breakpoint =="desktop" {
        @media (max-width: map.get(v.$breakpoints, desktop)) {
            @content;
        }
    }

    @else if $breakpoint =="large-desktop" {
        @media (min-width: map.get(v.$breakpoints, large-desktop)) {
            @content;
        }
    }
}

// Flexbox center mixin
@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

// Product card mixin
@mixin product-card {
    background-color: map.get(v.$colors, white);
    border: 1px solid map.get(v.$colors, light-gray);
    border-radius: map.get(v.$layout, border-radius-lg);
    overflow: hidden;
    transition: map.get(v.$transitions, normal);

    &:hover {
        transform: translateY(-5px);
        box-shadow: map.get(v.$shadows, large);
    }
}

// Product image style mixin
@mixin product-image-style {
    img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;

        &:hover {
            transform: scale(1.05);
        }
    }
}

// Container mixin
@mixin container {
    max-width: map.get(v.$layout, max-width);
    margin: 0 auto;
    padding: 0 map.get(v.$spacing, lg);
}

// Section padding mixin
@mixin section-padding {
    padding: map.get(v.$spacing, section) 0;

    @include breakpoint(tablet) {
        padding: 60px 0;
    }

    @include breakpoint(mobile) {
        padding: map.get(v.$spacing, section-mobile) 0;
    }
}

// Typography mixin
@mixin heading-style($level: 'h1') {
    font-family: map.get(v.$fonts, primary);
    font-weight: map.get(v.$font-weights, bold);
    color: map.get(v.$colors, dark-gray);

    @if $level =='h1' {
        font-size: map.get(v.$font-sizes, h1);

        @include breakpoint(mobile) {
            font-size: map.get(v.$font-sizes, h1-mobile);
        }
    }

    @else if $level =='h2' {
        font-size: map.get(v.$font-sizes, h2);

        @include breakpoint(mobile) {
            font-size: map.get(v.$font-sizes, h2-mobile);
        }
    }

    @else if $level =='h3' {
        font-size: map.get(v.$font-sizes, h3);

        @include breakpoint(mobile) {
            font-size: map.get(v.$font-sizes, h3-mobile);
        }
    }
}

// Text style mixin
@mixin body-text($size: 'regular') {
    font-family: map.get(v.$fonts, secondary);
    color: map.get(v.$colors, text-secondary);
    line-height: 1.6;

    @if $size =='large' {
        font-size: map.get(v.$font-sizes, large);
    }

    @else if $size =='regular' {
        font-size: map.get(v.$font-sizes, regular);
    }

    @else if $size =='small' {
        font-size: map.get(v.$font-sizes, small);
    }
}

// Link hover effect mixin
@mixin link-hover-effect($color: map.get(v.$colors, primary-red)) {
    position: relative;
    transition: color map.get(v.$transitions, normal);

    &:hover {
        color: $color;
    }

    &::after {
        content: '';
        position: absolute;
        bottom: -5px;
        left: 0;
        width: 0;
        height: 2px;
        background-color: $color;
        transition: width map.get(v.$transitions, normal);
    }

    &:hover::after {
        width: 100%;
    }
}

// Grid layout mixin
@mixin responsive-grid($min-width: 250px, $gap: map.get(v.$spacing, xl)) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
    gap: $gap;
}

// Card hover effect mixin
@mixin card-hover {
    transition: all map.get(v.$transitions, normal);

    &:hover {
        transform: translateY(-5px);
        box-shadow: map.get(v.$shadows, medium);
    }
}

// Button hover effect mixin for outline buttons
@mixin button-hover-fill($bg-color: map.get(v.$colors, primary-red), $text-color: map.get(v.$colors, white)) {
    &:hover {
        color: $text-color !important;
        background-color: $bg-color;
    }
}

// Hide element accessibly
@mixin visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}